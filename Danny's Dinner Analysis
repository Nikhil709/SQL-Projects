create database dannys_diner;
use dannys_diner;

create table sales (customer_id VARCHAR(1),
	order_date DATE,
	product_id INTEGER);
    
    select * from sales;
    
    INSERT INTO sales
	(customer_id, order_date, product_id)
VALUES
	('A', '2021-01-01', 1),
	('A', '2021-01-01', 2),
	('A', '2021-01-07', 2),
	('A', '2021-01-10', 3),
	('A', '2021-01-11', 3),
	('A', '2021-01-11', 3),
	('B', '2021-01-01', 2),
	('B', '2021-01-02', 2),
	('B', '2021-01-04', 1),
	('B', '2021-01-11', 1),
	('B', '2021-01-16', 3),
	('B', '2021-02-01', 3),
	('C', '2021-01-01', 3),
	('C', '2021-01-01', 3),
	('C', '2021-01-07', 3);
    
    CREATE TABLE menu(
	product_id INTEGER,
	product_name VARCHAR(5),
	price INTEGER
);

INSERT INTO menu
	(product_id, product_name, price)
VALUES
	(1, 'sushi', 10),
    (2, 'curry', 15),
    (3, 'ramen', 12);
    
    select * from menu;
    CREATE TABLE members(
	customer_id VARCHAR(1),
	join_date DATE
);


INSERT INTO members
	(customer_id, join_date)
VALUES
	('A', '2021-01-07'),
    ('B', '2021-01-09');
select * from sales;
select * from menu;
select * from members;

-- 1. What is the total amount each customer spent in the restaurant?
select sales.customer_id, sum(menu.price) as total_amount
from sales join menu on sales.product_id = menu.product_id
group by sales.customer_id;

-- 2. How many days has each customer visited the restaurant?
select customer_id, count(distinct order_date) as total_days
from sales 
group by customer_id
order by total_days desc;

-- 3. What was the first item from the menu purchased by each customer?
with customer_first_purchase as(
select  sales.customer_id, min(sales.order_date) as first_order_date
from sales 
group by customer_id
)
select cfp.customer_id, cfp.first_order_date, m.product_name
from customer_first_purchase cfp
join sales s on s.customer_id = cfp.customer_id
and cfp.first_order_date = s.order_date
join menu m on m.product_id = s.product_id;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
select m.product_name, count(*) as total_purchased
from sales s
join menu m on m.product_id = s.product_id
group by m.product_name 
order by total_purchased desc
limit 1;

-- 5. Which item was the most popular for each customer?
with customer_popularity as(
select s.customer_id, m.product_name, count(*) as total_count,
dense_rank() over(partition by s.customer_id order by count(*) DESC) as rnk
from sales s
join menu m on s.product_id = m.product_id
group by s.customer_id, m.product_name
)
select cp.customer_id, cp.product_name, cp.total_count
from customer_popularity cp
where rnk = 1;

-- 6. Which item was purchased first by the customer after they became a member?
with first_purchase_after_membership as(
select s.customer_id, min(s.order_date) as first_order_date
from sales s
join members mb on s.customer_id = mb.customer_id
where s.order_date >= mb.join_date
group by s.customer_id
)
select fpam.customer_id, m.product_name
from first_purchase_after_membership fpam
join sales s on s.customer_id = fpam.customer_id
and fpam.first_order_date = s.order_date
join menu m on s.product_id = m.product_id;

-- 7. Which item was purchased just before the customer became a member?
with last_purchased_before_membership as(
select s.customer_id, max(s.order_date) as last_order_date
from sales s
join members mb on s.customer_id = mb.customer_id
where s.order_date < mb.join_date
group by s.customer_id
)
select lpbm.customer_id, m.product_name 
from last_purchased_before_membership lpbm
join sales s on lpbm.customer_id = s.customer_id
and lpbm.last_order_date = s.order_date
join menu m on s.product_id = m.product_id;


-- 8. What is the total items and amount spent for each member before they became a member?

select s.customer_id, count(*) as total_items, sum(m.price) as total_spent
from sales s
join menu m on s.product_id = m.product_id
join members mb on s.customer_id = mb.customer_id
where s.order_date < mb.join_date
group by s.customer_id;
